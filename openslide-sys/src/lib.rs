/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OpenSlide {
   _unused: [u8; 0],
}
/**
 * The main OpenSlide type.
 */
pub type OpenSlide = _OpenSlide;
extern "C" {
   /**
    * Quickly determine whether a whole slide image is recognized.
    *
    * If OpenSlide recognizes the file referenced by @p filename, return a
    * string identifying the slide format vendor.  This is equivalent to the
    * value of the #OPENSLIDE_PROPERTY_NAME_VENDOR property.  Calling
    * openslide_open() on this file will return a valid OpenSlide object or
    * an OpenSlide object in error state.
    *
    * Otherwise, return NULL.  Calling openslide_open() on this file will also
    * return NULL.
    *
    * @param filename The filename to check.  On Windows, this must be in UTF-8.
    * @return An identification of the format vendor for this file, or NULL.
    * @since 3.4.0
    */
   pub fn openslide_detect_vendor(
      filename: *const ::std::os::raw::c_char,
   ) -> *const ::std::os::raw::c_char;
}
extern "C" {
   /**
    * Open a whole slide image.
    *
    * This function can be expensive; avoid calling it unnecessarily.  For
    * example, a tile server should not call openslide_open() on every tile
    * request.  Instead, it should maintain a cache of OpenSlide objects and
    * reuse them when possible.
    *
    * @param filename The filename to open.  On Windows, this must be in UTF-8.
    * @return
    *         On success, a new OpenSlide object.
    *         If the file is not recognized by OpenSlide, NULL.
    *         If the file is recognized but an error occurred, an OpenSlide
    *         object in error state.
    */
   pub fn openslide_open(filename: *const ::std::os::raw::c_char) -> *mut OpenSlide;
}
extern "C" {
   /**
    * Get the number of levels in the whole slide image.
    *
    * @param osr The OpenSlide object.
    * @return The number of levels, or -1 if an error occurred.
    * @since 3.3.0
    */
   pub fn openslide_get_level_count(osr: *mut OpenSlide) -> i32;
}
extern "C" {
   /**
    * Get the dimensions of level 0 (the largest level). Exactly
    * equivalent to calling openslide_get_level_dimensions(osr, 0, w, h).
    *
    * @param osr The OpenSlide object.
    * @param[out] w The width of the image, or -1 if an error occurred.
    * @param[out] h The height of the image, or -1 if an error occurred.
    * @since 3.3.0
    */
   pub fn openslide_get_level0_dimensions(osr: *mut OpenSlide, w: *mut i64, h: *mut i64);
}
extern "C" {
   /**
    * Get the dimensions of a level.
    *
    * @param osr The OpenSlide object.
    * @param level The desired level.
    * @param[out] w The width of the image, or -1 if an error occurred
    *               or the level was out of range.
    * @param[out] h The height of the image, or -1 if an error occurred
    *               or the level was out of range.
    * @since 3.3.0
    */
   pub fn openslide_get_level_dimensions(osr: *mut OpenSlide, level: i32, w: *mut i64, h: *mut i64);
}
extern "C" {
   /**
    * Get the downsampling factor of a given level.
    *
    * @param osr The OpenSlide object.
    * @param level The desired level.
    * @return The downsampling factor for this level, or -1.0 if an error occurred
    *         or the level was out of range.
    * @since 3.3.0
    */
   pub fn openslide_get_level_downsample(osr: *mut OpenSlide, level: i32) -> f64;
}
extern "C" {
   /**
    * Get the best level to use for displaying the given downsample.
    *
    * @param osr The OpenSlide object.
    * @param downsample The downsample factor.
    * @return The level identifier, or -1 if an error occurred.
    * @since 3.3.0
    */
   pub fn openslide_get_best_level_for_downsample(osr: *mut OpenSlide, downsample: f64) -> i32;
}
extern "C" {
   /**
    * Copy pre-multiplied ARGB data from a whole slide image.
    *
    * This function reads and decompresses a region of a whole slide
    * image into the specified memory location. @p dest must be a valid
    * pointer to enough memory to hold the region, at least (@p w * @p h * 4)
    * bytes in length. If an error occurs or has occurred, then the memory
    * pointed to by @p dest will be cleared.
    *
    * @param osr The OpenSlide object.
    * @param dest The destination buffer for the ARGB data.
    * @param x The top left x-coordinate, in the level 0 reference frame.
    * @param y The top left y-coordinate, in the level 0 reference frame.
    * @param level The desired level.
    * @param w The width of the region. Must be non-negative.
    * @param h The height of the region. Must be non-negative.
    */
   pub fn openslide_read_region(
      osr: *mut OpenSlide,
      dest: *mut u32,
      x: i64,
      y: i64,
      level: i32,
      w: i64,
      h: i64,
   );
}
extern "C" {
   /**
    * Close an OpenSlide object.
    * No other threads may be using the object.
    * After this call returns, the object cannot be used anymore.
    *
    * @param osr The OpenSlide object.
    */
   pub fn openslide_close(osr: *mut OpenSlide);
}
extern "C" {
   /**
    * Get the current error string.
    *
    * For a given OpenSlide object, once this function returns a non-NULL
    * value, the only useful operation on the object is to call
    * openslide_close() to free its resources.
    *
    * @param osr The OpenSlide object.
    * @return A string describing the original error that caused
    * the problem, or NULL if no error has occurred.
    * @since 3.2.0
    *
    */
   pub fn openslide_get_error(osr: *mut OpenSlide) -> *const ::std::os::raw::c_char;
}
extern "C" {
   /**
    * Get the NULL-terminated array of property names.
    *
    * Certain vendor-specific metadata properties may exist
    * within a whole slide image. They are encoded as key-value
    * pairs. This call provides a list of names as strings
    * that can be used to read properties with openslide_get_property_value().
    *
    * @param osr The OpenSlide object.
    * @return A NULL-terminated string array of property names, or
    *         an empty array if an error occurred.
    */
   pub fn openslide_get_property_names(osr: *mut OpenSlide)
      -> *const *const ::std::os::raw::c_char;
}
extern "C" {
   /**
   * Get the value of a single property.
   *
   * Certain vendor-specific metadata properties may exist
   * within a whole slide image. They are encoded as key-value
   * pairs. This call provides the value of the property given
   * by @p name.
   *
   * @param osr The OpenSlide object.
   * @param name The name of the desired property. Must be
                 a valid name as given by openslide_get_property_names().
   * @return The value of the named property, or NULL if the property
   *         doesn't exist or an error occurred.
   */
   pub fn openslide_get_property_value(
      osr: *mut OpenSlide,
      name: *const ::std::os::raw::c_char,
   ) -> *const ::std::os::raw::c_char;
}
extern "C" {
   /**
   * Get the NULL-terminated array of associated image names.
   *
   * Certain vendor-specific associated images may exist
   * within a whole slide image. They are encoded as key-value
   * pairs. This call provides a list of names as strings
   * that can be used to read associated images with
   * openslide_get_associated_image_dimensions() and
   * openslide_read_associated_image().
   *
   * @param osr The OpenSlide object.
   * @return A NULL-terminated string array of associated image names, or
             an empty array if an error occurred.
   */
   pub fn openslide_get_associated_image_names(
      osr: *mut OpenSlide,
   ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
   /**
    * Get the dimensions of an associated image.
    *
    * This function returns the width and height of an associated image
    * associated with a whole slide image. Once the dimensions are known,
    * use openslide_read_associated_image() to read the image.
    *
    * @param osr The OpenSlide object.
    * @param name The name of the desired associated image. Must be
    *            a valid name as given by openslide_get_associated_image_names().
    * @param[out] w The width of the associated image, or -1 if an error occurred.
    * @param[out] h The height of the associated image, or -1 if an error occurred.
    */
   pub fn openslide_get_associated_image_dimensions(
      osr: *mut OpenSlide,
      name: *const ::std::os::raw::c_char,
      w: *mut i64,
      h: *mut i64,
   );
}
extern "C" {
   /**
    * Copy pre-multiplied ARGB data from an associated image.
    *
    * This function reads and decompresses an associated image associated
    * with a whole slide image. @p dest must be a valid pointer to enough
    * memory to hold the image, at least (width * height * 4) bytes in
    * length.  Get the width and height with
    * openslide_get_associated_image_dimensions(). This call does nothing
    * if an error occurred.
    *
    * @param osr The OpenSlide object.
    * @param dest The destination buffer for the ARGB data.
    * @param name The name of the desired associated image. Must be
    *             a valid name as given by openslide_get_associated_image_names().
    */
   pub fn openslide_read_associated_image(
      osr: *mut OpenSlide,
      name: *const ::std::os::raw::c_char,
      dest: *mut u32,
   );
}
extern "C" {
   /**
    * Get the version of the OpenSlide library.
    *
    * @return A string describing the OpenSlide version.
    * @since 3.3.0
    */
   pub fn openslide_get_version() -> *const ::std::os::raw::c_char;
}
